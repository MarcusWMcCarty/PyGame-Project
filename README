-Planning
    In Alien Invasion, the player controls a rocket ship that appears at the bottom center of the screen. 
    The player can move the ship right and left using the arrow keys and shoot bullets using the spacebar. 
    When the game begins, a fleet of aliens fill the sky and moves across and down the screen. 
    The player shoots and destroys the aliens.
    If the player shoots all the aliens, a new fleet appears that moves fasetr than the previous fleet. 
    If any alien hits the players ship or reaches the bottom of the screen, the player loses a ship.
    If the player loses three ships, the game ends. 

Starting the Game Project:
    Starts as a class called AlienInvasion.
    Sets up Display
    Sets up Surface, a surface in pygame is a part of the screen where a game element can be displayed.

Setting Background Color:
    Fill the background using the fill() method, which acts as a surface and only takes one argument, a color.

Creating a Settings Class
    Created a settings class to store settings varibales in one place. this approach works better for adjusting individual settings. 

Adding the Ship Imaage:
    Load the image and use pygame blit() method to draw it. 
    Postition the ship image into the mid bottom and called on it in the alien_invasion file to make it appear at te bottom of the screen.

Refactoring the _check_events() and _update_screen() methods
    The _check_events() Method 
        We’ll start by moving the code that manages events to a separate function
        called check_events(). This will simplify run_game() and isolate the event management loop. 
        Isolating the event loop allows you to manage events separately from other aspects of the game, like updating the screen.

Piltoing the Ship
    give the player the ability to move the ship right and left. To do this,
    we’ll write code that responds when the player presses the right or left
    arrow key
    
Moving the Ship
    First we set up a KEYDOWN event that makes the ship move everytime a player presses the right arrow key one spacebar
    Then we must allow for continuous movement.
        When the player holds down the right arrow key, we want the ship to
        continue moving right until the player releases the key. We’ll have our
        game detect a pygame.KEYUP event so we’ll know when the right arrow key is
        released; then we’ll use the KEYDOWN and KEYUP events together with a flag
        called moving_right to implement continuous motion.

        When the ship is motionless, the moving_right flag will be False. When the
        right arrow key is pressed, we’ll set the flag to True, and when it’s released,
        we’ll set the flag to False again.

        The Ship class controls all attributes of the ship, so we’ll give it an attribute called moving_right and an update() method to check the status of the
        moving_right flag. The update() method will change the position of the ship if
        the flag is set to True. We’ll call this method any time we want to update the
        position of the ship

Adjusting the Ships Speed
    Currently, the ship moves one pixel per cycle through the while loop, but
    we can take finer control of the ship’s speed by adding a ship_speed_factor
    attribute to the Settings class. We’ll use this attribute to determine how far
    to move the ship on each pass through the loop

    Then we Limit the ships speed by modyfying the supdate() method in ship.
        


        